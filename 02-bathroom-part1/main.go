package main

import (
	"fmt"
	"strconv"
	"strings"
)

func main() {

	// example steps for tests
	// TODO: Write tests
	// expect 1985
	// instructions := []string{
	// 	"ULL",
	// 	"RRDDD",
	// 	"LURDL",
	// 	"UUUUD",
	// }

	// original directions from http://adventofcode.com/2016/day/2
	// final answer to expect = 74921
	instructions := []string{
		"RUDULRLLUULRURDDRRUDURULLLDRLRLUDDLUDUDDUDRRDUDULDUUULLRULLRLDDLDLDDRLRRRRUDLLDDUULDRLLUDDRRUURLULRRRDLLURRUUDURUDDURLUDDDLUDDUUDUURUDLRDRDRLRDRLDRUDRUUDLRDDRRURDDLRDDRRURDUDDLULLUDRURURRRLRRUDUULULULRRLDLUDUURRLLRUDLLDRDDLRRRULRUDLULDDLLLULDLRUDLLLLRDDLRDRLDRLLRDRRDLRDULULRLLLDRUDRRRUULRUULDRURLUDRURRDLLDLRDLDDDDRRLUDLRRLUUUURDRDDLRRURURRDUULLRLURLURUDDDRDURDUUDRLRLRRLDDLDLDLDDDUDDULURLDDLLRLRRDULUDDLULRLUDDLDLRULUUUDRLDRUDURLUDDRLLRUULDLRRRRDLLLLURULLRDRRUDLUULRRDLLRLRLUDLDDULLDLLRDLDLL",
		"LLUUUUUUDUDRLRDRDLDURRRLLRRLRURLLUURRLLUDUDLULUURUUURDLUDLDDLULLRDLRUULDLRDUDURLLDDUDUDULLUDDUULLLUULRRRLULRURRDLRUDUDDURRRDRUURDURLLULLRULLDRUULLURLDRDUUDDDDDDRRLDRLRRRLULDDUURRLLLLDRURLURDRDRDURUDUURRDUDUDRLLUUDDRLUDDDRDLDLRLDRURRDLLRULDRLLURURRLUULLRLRRURDDRDRUUURUURUUUDLLRRLUDRLDLRLURLDLUDDUDDDLDUDRRLDLRURULRLLRDUULURRRULDLLLRLDDDUURRRRDULLRURRLULULDLRRUDUDDLRUURDLDUDDUDRRDLRRRDUDUUUDLLDDDDLURLURRRUUULLLULRRLLLLLLULDUUDLRUDRRDLRDUUDUDLLRLDLLRUURDUUURUUUDDLLUUDLULDURLULULUUUDRUDULLURRULRULLRDLDDU",
		"RLUUURULLDLRLDUDRDURRDUURLLUDDDUULRRRLRLURDDRUULUDULDUUDDDDUDDDDRUDDLDUUDRUDLRRRLLRDDLLLRLLRUULRUULDDRURRLURRLRLULDDRRRDDURDDRDRDULRUDRUUDULRLLULDLRLLDRULRDDRRDDUDLRLLUDRDRRRLUDULRDLRDDURRUUDDRRUDURRUUUDDRRDUDURLUUDUDUURDDDLURLULLUULULURUDUUDRUDULLUUULURDLDUULLDDLLDULRLRLRDUUURUUDLRLDURUDRLDULLUDLDLLRDUURRDUDURLUUUDLLRRULRLULRLDLLURDURRULRLLRRDUDLLRDRRRRDLUUDRUUUDDLRLUDDDDDDRURRRUUURRDLLRURLDDLLDLRRLLLDRRULRRUDLDRDDRRLULURLLUURURURRRRUUUUURUDURLRLLLULULDLLDLRDRRULUDUDRDRRDRDRRDUDLLLRUDRUDDDULRULRRRDRLRUUUURUDURDUUULLULRUDDULDUUDLDURRD",
		"ULRULDDLDLULLLRRRLRUDDDDDLLDDUDLRRDULUUDRDLRRURDRRLUULRURUDRRULDLLLUDRUUDULULUDDRUDDDRDURRRDRDUUURLRDULUDRDRLDRUDDLLLDRRULUDLUDLDLLRRUDUULULDLDLLUURDLDDLLUUDURLURLLLDRDLDRRLRULUURRDRULRUUURULRRUDDDDLLDLDDLLRRLRRRRDUUDUDLDRDRRURDLRURULDLRDLLLLRUDRLLRDLRLRDURDRUDURRRLRDRDLLRLUDDDDRLRLLDUURRURLUURUULUDLUURDRRUDDLUDUDDDURRDRUDRLRULDULUUUUUUDDUDRUDUUURUDRRDLUDLUUDUULUDURDLDDDLLURRURUUDUDDRRDRLLULULDRLRURRDDDRDUUURDDDRULUDRDDLDURRLDDDLRRRLDDRDURULDLUDLLLURLURRLRRULDLLDDUDRRULDRRRRLURRUULRRRUDLURDLLDLLDULUUDRRLDLLLDRLRUDLUULDLDRUDUDURDRUDRDDDLRLULLUR",
		"LRLUUURRLRRRRRUURRLLULRLULLDLUDLUDRDDRLDLRLULLURDURLURDLLRLDUUDDURRRRLDLLRULLRLDLLUUDRLDDLLDRULDRLLRURDLRURRUDLULLRURDLURRURUDULLDRLLUUULUDRURRUUDUDULUUULRLDDULDRDLUDDUDDDLRURULLDLLLRLLUURDLRUDLLLLDLLRLRUUUDDRUUUUDLDLRDDURLDURUULLLUUDLLLLDULRRRLLDLDRRDRLUDRUDURLLUDLRLLUDUDRDDDRDLRDLRULUULDRLUDLRLDUURLRRLUDDDUUDDDUDRLDLDUDLURUULLDDDURUUULRLUDLDURUUDRDRURUDDUURDUUUDLLDLDLDURUURLLLLRURUURURULRULLRUDLRRUUUUUDRRLLRDDUURDRDRDDDUDRLURDRRRUDLLLDURDLUUDLLUDDULUUDLDUUULLDRDLRURUURRDURRDLURRRRLLUUULRDULDDLDUURRDLDLLULRRLLUDLDUDLUUL",
	}

	// define a struct for neighbouring keys (where 0 is empty)
	type relationship struct {
		num   int
		up    int
		down  int
		left  int
		right int
	}

	// TODO: Explore golang matrices libraries (3rd party, not built in)
	// First relationship is 0 to make accessing the array (with 0-based index) easier to read later
	relationships := []relationship{
		{num: 0, up: 0, down: 0, left: 0, right: 0},
		{num: 1, up: 0, down: 4, left: 0, right: 2},
		{num: 2, up: 0, down: 5, left: 1, right: 3},
		{num: 3, up: 0, down: 6, left: 2, right: 0},
		{num: 4, up: 1, down: 7, left: 0, right: 5},
		{num: 5, up: 2, down: 8, left: 4, right: 6},
		{num: 6, up: 3, down: 9, left: 5, right: 0},
		{num: 7, up: 4, down: 0, left: 0, right: 8},
		{num: 8, up: 5, down: 0, left: 7, right: 9},
		{num: 9, up: 6, down: 0, left: 8, right: 0},
	}

	// Create variable to store the final doorcode
	doorcode := make([]string, 0)

	// Start at key 5
	// Loop through each row of instructions to get the final keycode for that row
	key := relationships[5]
	for r, row := range instructions {
		for _, direction := range row {
			// fmt.Printf("%v %#U\n", direction, direction)
			if direction == 'U' && key.up != 0 {
				fmt.Println("  Move up to ", key.up)
				key = relationships[key.up]
			} else if direction == 'D' && key.down != 0 {
				fmt.Println("  Move down to ", key.down)
				key = relationships[key.down]
			} else if direction == 'L' && key.left != 0 {
				fmt.Println("  Move left to ", key.left)
				key = relationships[key.left]
			} else if direction == 'R' && key.right != 0 {
				fmt.Println("  Move right to ", key.right)
				key = relationships[key.right]
			}
		}
		fmt.Println("Key code for row", r, ":", key.num)
		doorcode = append(doorcode, strconv.Itoa(key.num))
	}

	fmt.Println("FULL DOOR CODE", strings.Join(doorcode, ""))
}
